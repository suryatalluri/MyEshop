/**
 * Copyright (C) 2015 WaveMaker, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.eshopping;
// Generated 28 Nov, 2014 11:40:08 AM by Hibernate Tools 7.1.1


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;


import javax.persistence.Transient;
import javax.persistence.CascadeType;


/**
 * Product generated by hbm2java
 */
@Entity
@Table(name="PRODUCT"
    ,schema="PUBLIC"
    ,catalog="PUBLIC"
)
public class Product  implements java.io.Serializable {


     private Integer id;
     private String imgUrl;
     private String category;
     private double price;
     private String description;
     private String name;
     private boolean availability;
     private Set<Itemorder> itemorders = new HashSet<Itemorder>(0);
     private Set<Orderdetail> orderdetails = new HashSet<Orderdetail>(0);

    public Product() {
    }

	
    public Product(String category, double price, String description, String name, boolean availability) {
        this.category = category;
        this.price = price;
        this.description = description;
        this.name = name;
        this.availability = availability;
    }
    public Product(String imgUrl, String category, double price, String description, String name, boolean availability, Set<Itemorder> itemorders, Set<Orderdetail> orderdetails) {
       this.imgUrl = imgUrl;
       this.category = category;
       this.price = price;
       this.description = description;
       this.name = name;
       this.availability = availability;
       this.itemorders = itemorders;
       this.orderdetails = orderdetails;
    }

     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="ID", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

    
    @Column(name="IMG_URL")
    public String getImgUrl() {
        return this.imgUrl;
    }
    
    public void setImgUrl(String imgUrl) {
        this.imgUrl = imgUrl;
    }

    
    @Column(name="CATEGORY", nullable=false)
    public String getCategory() {
        return this.category;
    }
    
    public void setCategory(String category) {
        this.category = category;
    }

    
    @Column(name="PRICE", nullable=false, precision=64, scale=0)
    public double getPrice() {
        return this.price;
    }
    
    public void setPrice(double price) {
        this.price = price;
    }

    
    @Column(name="DESCRIPTION", nullable=false)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }

    
    @Column(name="NAME", nullable=false)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    
    @Column(name="AVAILABILITY", nullable=false)
    public boolean isAvailability() {
        return this.availability;
    }
    
    public void setAvailability(boolean availability) {
        this.availability = availability;
    }

@OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="product")
    public Set<Itemorder> getItemorders() {
        return this.itemorders;
    }
    
    public void setItemorders(Set<Itemorder> itemorders) {
        this.itemorders = itemorders;
    }

@OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="product")
    public Set<Orderdetail> getOrderdetails() {
        return this.orderdetails;
    }
    
    public void setOrderdetails(Set<Orderdetail> orderdetails) {
        this.orderdetails = orderdetails;
    }




}

